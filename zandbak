#!/usr/bin/env bash
#
# zandbak
#
# Run php sandbox shell commands
#
# Usage:
#   zandbak [--option <argument>]
#
# Options:
#   -h --help         Display this help information.
#   -b --base-path    Set base path.
#   -r --repos        Select repositories.
#   --gs              Git status.
#   --gb              Git current branch.
#   --gco <branch>    Git checkout branch.
#   --gr              Git reset.
#   --gcl             Git clean.
#   --gpl             Git pull.
#   --ci              Composer install.
#   --cu              Composer update.
#   --rf              Redis cache flushall.
#   --debug           Display debug information.
#
# https://github.com/bramkok/zandbak

### Configuration
#####################################################################

set -eu -o pipefail
# shellcheck disable=SC2034
DEFAULT_IFS="${IFS}"
SAFER_IFS=$'\n\t'
IFS="${SAFER_IFS}"
_ME=$(basename "${0}") # Program basename


### Global variables
#####################################################################

# Default repository path
_BASE_PATH="/home/vagrant/repositories/"

# Repositories to run commands in
_REPOSITORIES=()

### Debug/Exit/Help
#####################################################################

__DEBUG_COUNTER=0
_debug() {
  if [[ "${_USE_DEBUG:-"0"}" -eq 1 ]]; then
    __DEBUG_COUNTER=$((__DEBUG_COUNTER+1))
    printf "%s " "${__DEBUG_COUNTER}"
    "${@}"
    printf "――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\n"
  fi
}

debug() {
  _debug echo "${@}"
}

_die() {
  "${@}" 1>&2
  exit 1
}

die() {
  _die echo "${@}"
}

_print_help() {
  cat <<HEREDOC

zandbak

Run php sandbox shell commands

Usage:
  ${_ME} [--option <argument>]

Options:
   -h --help         Display this help information.
   -b --base-path    Set base path.
   -r --repos        Select repositories.
   --gs              Git status.
   --gb              Git current branch.
   --gco <branch>    Git checkout branch.
   --gr              Git reset.
   --gcl             Git clean.
   --gpl             Git pull.
   --ci              Composer install.
   --cu              Composer update.
   --rf              Redis cache flushall.
   --debug           Display debug information.

HEREDOC
}

### Options
#####################################################################

# Short options followed by a ':' require an argument
optstring=xo:h

unset options
while ((${#})) # While the number of arguments is greater than 0
do
  case ${1} in
    -[!-]?*) # Option type: -ab
      for ((i=1; i<${#1}; i++))
      do
        c=${1:i:1} # Extract 1 character from position 'i'
        options+=("-${c}") # Add current char to options
        # If the option requires an argument, and it's not the last char
        # make the rest of the string its argument
        if [[ ${optstring} = *"${c}:"* && ${1:i+1} ]]; then
          options+=("${1:i+1}")
          break
        fi
      done
      ;;
    --?*=*) # Option type: --foo=bar, split on first '='
      options+=("${1%%=*}" "${1#*=}")
      ;;
    --) # End of options
      options+=(--endopts)
      shift
      options+=("${@}")
      break
      ;;
    *) # Else, nothing special
      options+=("${1}")
      ;;
  esac
  shift
done

set -- "${options[@]:-}"
unset options

# Option variables
_PRINT_HELP=0
_USE_DEBUG=0
_OPTION_GS=0
_OPTION_GB=0
_OPTION_GCO=0
_OPTION_GR=0
_OPTION_GCL=0
_OPTION_GPL=0
_OPTION_CI=0
_OPTION_CU=0
_OPTION_RF=0

_require_argument() {
  local _option="${1:-}"
  local _argument="${2:-}"
  if [[ -z "${_argument}" ]] || [[ "${_argument}" =~ ^- ]]; then
    _die printf "Option requires a argument: %s\n" "${_option}"
  fi
}

while [ ${#} -gt 0 ]
do
  __option="${1:-}"
  __maybe_param="${2:-}"
  case "${__option}" in
    -h|--help)
      _PRINT_HELP=1
      ;;
    --debug)
      _USE_DEBUG=1
      ;;
    -b|--base-path)
      _require_argument "${__option}" "${__maybe_param}"
      _OPTION_B_PARAM="${__maybe_param}"
       shift
      ;;
    -r|--repos)
      _require_argument "${__option}" "${__maybe_param}"
      _OPTION_R_PARAM="${__maybe_param}"
       shift
      ;;
    --gs)
      _OPTION_GS=1
      ;;
    --gb)
      _OPTION_GB=1
      ;;
    --gco)
      _require_argument "${__option}" "${__maybe_param}"
      _OPTION_GCO_PARAM="${__maybe_param}"
      _OPTION_GCO=1
      ;;
    --gr)
      _OPTION_GCO_PARAM="${__maybe_param}"
      _OPTION_GR=1
      ;;
    --gcl)
      _OPTION_GCL=1
      ;;
    --gpl)
      _OPTION_GPL=1
      ;;
    --ci)
      _OPTION_CI=1
      _OPTION_CI_PARAM="${__maybe_param}"
      ;;
    --cu)
      _OPTION_CU=1
      _OPTION_CU_PARAM="${__maybe_param}"
      ;;
    --rf)
      _OPTION_RF=1
      ;;
    --endopts)
      break
      ;;
    -*)
      _die printf "Unexpected option: %s\n" "${__option}"
      ;;
  esac
  shift
done

### Functions
#####################################################################

_isDirectory() {
  local _directory="${1:-}"
  if [[ ! -d "$_directory" ]]; then
    die "Directory '$_directory' does not exist."
  else
    return 0
  fi
}

_isGitRepository() {
  local _directory="${1:-}"
  local _gitDirectory="${_directory}/.git"
  if [[ -d "$_gitDirectory" ]]; then
    return 0
  else
    return 1
  fi
}

_setBasePath() {
  local _basePath="${1:-}"
  if [[ -n "$_basePath" ]]; then
    _isDirectory "${_basePath}"
    _BASE_PATH=$_basePath
  fi
  return 0
}

_setRepositories() {
  local _params="${1:-}"
  local _directories=()
  if [[ -z "$_params" ]]; then
    while read -r line; do
      if _isGitRepository "${line}"; then
        _directories+=($line)
      fi
    done < <(find "$_BASE_PATH" -maxdepth 1 -mindepth 1 -type d)
  else
    while read -r line; do
      local _basePathWithDirectory="$_BASE_PATH$line"
      _isDirectory "${_basePathWithDirectory}"
      if ! _isGitRepository "${_basePathWithDirectory}"; then
        die "Directory '$_basePathWithDirectory' is not a git repository."
      fi
      _directories+=($_basePathWithDirectory)
    done < <(echo -e "${_params// /\\n}")
  fi
  _REPOSITORIES+=(${_directories[@]})
  return 0
}

_runOnRepositories() {
  local _command="${1:-}"
  local _quiet="${2:-}"
  for repository in "${_REPOSITORIES[@]}"; do
    local _repositoryName="${repository/$_BASE_PATH//}"
    local _repositoryNameTrimmed="\e[4m${_repositoryName:1}\e[0m:"
    cd "${repository}"
    if ((_quiet)); then
      if [[ -n "$(eval "$_command")" ]]; then
        echo -e "${_repositoryNameTrimmed}"
        (eval "$_command")
        echo
      fi
    else
      echo -e "${_repositoryNameTrimmed}"
      (eval "$_command")
      echo
    fi
  done
}

_gitStatus() {
  _runOnRepositories "git status -s" 1
  exit 0
}

_gitBranch() {
  _runOnRepositories "git rev-parse --abbrev-ref HEAD"
  exit 0
}

_gitCheckout() {
  local _branch="${1:-}"
  _runOnRepositories "git checkout ${_branch}"
  exit 0
}

_gitReset() {
  local _params="${1:-}"
  if [[ -z "$_params" ]]; then
    _params="--hard"
  fi
  _runOnRepositories "git reset HEAD ${_params}"
  exit 0
}

_gitClean() {
  _runOnRepositories "git clean -f" 1
  exit 0
}

_gitPull() {
  _runOnRepositories "git pull --ff-only"
  exit 0
}

_composer() {
  local _command="${1:-}"
  local _params="${2:-}"
  local _mainCommand="/usr/bin/php -dmemory_limit=-1 /usr/bin/composer"
  if [[ -z "$_params" ]]; then
    _params="true"
  fi
  export COMPOSER_DISCARD_CHANGES="$_params"
  _runOnRepositories "${_mainCommand} ${_command}"
  exit 0
}

_redisCli() {
  local _command="${1:-}"
  redis-cli "${_command}"
}

### Runtime
#####################################################################

_main() {
  if ((_PRINT_HELP)); then
    _print_help
  else
    # Set base path
    _setBasePath "${_OPTION_B_PARAM:-}"

    # Set repositories
    _setRepositories "${_OPTION_R_PARAM:-}"

    # Git status
    if ((_OPTION_GS)); then _gitStatus; fi

    # Git branch
    if ((_OPTION_GB)); then _gitBranch; fi

    # Git checkout
    if ((_OPTION_GCO)); then _gitCheckout "${_OPTION_GCO_PARAM:-}"; fi

    # Git reset
    if ((_OPTION_GR)); then _gitReset "${_OPTION_GR_PARAM:-}"; fi

    # Git clean
    if ((_OPTION_GCL)); then _gitClean; fi

    # Git pull
    if ((_OPTION_GPL)); then _gitPull; fi

    # Composer install
    if ((_OPTION_CI)); then _composer "install" "${_OPTION_CI_PARAM:-}"; fi

    # Composer update
    if ((_OPTION_CU)); then _composer "update" "${_OPTION_CU_PARAM:-}"; fi

    # Flush redis cache
    if ((_OPTION_RF)); then _redisCli "flushall"; fi

    # Exit
    exit 0
  fi
}

_main "${@:-}" # Call `_main` after everything has been defined
